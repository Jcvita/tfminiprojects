# -*- coding: utf-8 -*-
"""mnist_handwritten.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10E7vDFW3CnZVeDFHcnRkJ0gSFF11danb
"""

import tensorflow.compat.v2 as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt

tf.enable_v2_behavior()

#load in data
(ds_train, ds_test), ds_info = tfds.load(
    'mnist',
    split=['train', 'test'],
    shuffle_files=True,
    as_supervised=True,
    with_info = True
)

#make sure images are the same and normalize colors
def normalize_img(img, label):
  return tf.cast(img, tf.float32) / 255., label

ds_train = ds_train.map(
    normalize_img,
    num_parallel_calls=tf.data.experimental.AUTOTUNE
)
ds_train = ds_train.cache()
ds_train = ds_train.shuffle(ds_info.splits['train'].num_examples)
ds_train = ds_train.batch(128) # make changes to network after looking at 128 examples
ds_train = ds_train.prefetch(tf.data.experimental.AUTOTUNE) # optional performance boost. Improves throughput at the cost of more memory

ds_test = ds_test.map(
    normalize_img,
    num_parallel_calls = tf.data.experimental.AUTOTUNE
)
ds_test = ds_test.batch(128)
ds_test = ds_test.cache()
ds_test = ds_test.prefetch(tf.data.experimental.AUTOTUNE)

# define the model
model = tf.keras.models.Sequential([ #runs through layers once
    tf.keras.layers.Flatten(input_shape=(28, 28, 1)), # convert 28x28x1 to 1x28^2 (each pixel in the image)
    tf.keras.layers.Dense(128, activation='relu'), # dense means every node is connected between layers
    tf.keras.layers.Dense(10, activation='softmax'), # output layer 0-9
])

#compile model
model.compile(
    loss='sparse_categorical_crossentropy', # method for calculating how off our guess is
    optimizer=tf.keras.optimizers.Adam(0.001), # method to tweak weights based on loss
    metrics=['accuracy'], 
)

# fit the model
model.fit(
    ds_train,
    epochs=6, # number of times to iterate throught training data
    validation_data=ds_test,
)

# test the model

#shuffle the dataset 
ds_shuff = ds_test.shuffle(1000)

for img, lbl in ds_shuff:
    #get image
    image = img[0].numpy()
    image = image.reshape(28, 28) # image: 28x28x1 -> 28x28
    #make prediction
    prediction = model.predict(img)
    prediction = prediction[0].argmax()
    print("the prediction is {}".format(prediction))
    plt.imshow(image)
    break